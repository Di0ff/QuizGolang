INSERT INTO questions (question, options, correct_option, difficulty, topic) VALUES
('Что выведет код: fmt.Println([]int{1,2,3}[1:2])?', '["[1]", "[2]", "[1 2]", "ошибка компиляции"]', 1, 1, 'arrays'),
('Какой тип данных у nil в Go?', '["interface{}", "нет типа", "зависит от контекста", "*int"]', 2, 2, 'types'),
('Что такое defer в Go?', '["отложенное выполнение функции", "обработка ошибок", "горутина", "канал"]', 0, 1, 'basics'),
('Сколько goroutine запустит этот код: for i := 0; i < 10; i++ { go func() {} }?', '["0", "1", "10", "зависит от планировщика"]', 2, 2, 'concurrency'),
('Что выведет: var x interface{} = nil; fmt.Println(x == nil)?', '["true", "false", "panic", "ошибка компиляции"]', 0, 3, 'interfaces'),
('Какой размер буфера у канала: ch := make(chan int)?', '["0", "1", "бесконечный", "ошибка компиляции"]', 0, 1, 'channels'),
('Что такое method receiver в Go?', '["параметр метода", "возвращаемое значение", "тип, к которому привязан метод", "интерфейс"]', 2, 2, 'methods'),
('Можно ли изменить строку в Go?', '["да", "нет, строки immutable", "только с помощью unsafe", "зависит от способа создания"]', 1, 1, 'strings'),
('Что выведет: fmt.Println(1 << 2)?', '["2", "3", "4", "8"]', 2, 1, 'operators'),
('Какой zero value у slice?', '["[]", "nil", "{}", "0"]', 1, 1, 'slices'),
('Что делает select в Go?', '["выбирает из нескольких case", "работает с каналами", "оба варианта", "сортирует данные"]', 2, 2, 'concurrency'),
('Можно ли передать nil в качестве error?', '["да", "нет", "только через type assertion", "panic"]', 0, 2, 'errors'),
('Что такое blank identifier _?', '["неиспользуемая переменная", "пустая строка", "nil значение", "анонимная функция"]', 0, 1, 'basics'),
('Как закрыть канал?', '["close(ch)", "ch.Close()", "delete(ch)", "ch <- nil"]', 0, 1, 'channels'),
('Что выведет: fmt.Println(len(map[int]int{}))?', '["0", "nil", "ошибка", "undefined"]', 0, 1, 'maps'),
('Какой zero value у bool?', '["false", "true", "nil", "0"]', 0, 1, 'types'),
('Что такое embedding в Go?', '["композиция типов", "наследование", "полиморфизм", "инкапсуляция"]', 0, 2, 'structs'),
('Можно ли сравнить два slice?', '["да", "нет, только через циклы или reflect", "только пустые", "с помощью =="]', 1, 2, 'slices'),
('Что выведет: var s []int; s = append(s, 1); fmt.Println(cap(s))?', '["1", "0", "2", "неопределено"]', 0, 2, 'slices'),
('Как создать read-only канал?', '["<-chan int", "chan<- int", "chan int", "readonly chan int"]', 0, 2, 'channels'),
('Что такое panic в Go?', '["исключение", "остановка программы", "ошибка", "все варианты"]', 1, 1, 'errors'),
('Можно ли вызвать метод у nil pointer?', '["да, если метод не использует поля", "нет, всегда panic", "только с defer", "зависит от типа"]', 0, 3, 'pointers'),
('Что выведет: fmt.Println(10 / 3)?', '["3", "3.33", "3.0", "ошибка"]', 0, 1, 'operators'),
('Какой zero value у pointer?', '["nil", "0", "null", "&{}"]', 0, 1, 'pointers'),
('Что такое type assertion?', '["приведение типов", "проверка типа interface", "оба варианта", "создание типа"]', 2, 2, 'interfaces'),
('Можно ли создать generic функцию без type parameters до Go 1.18?', '["да, через interface{}", "нет", "только для встроенных типов", "через reflection"]', 1, 2, 'generics'),
('Что выведет: var m map[string]int; fmt.Println(m["key"])?', '["0", "nil", "panic", "ошибка компиляции"]', 0, 2, 'maps'),
('Как проверить, что канал закрыт?', '["v, ok := <-ch", "ch.IsClosed()", "if ch == nil", "select + default"]', 0, 2, 'channels'),
('Что такое context в Go?', '["управление жизненным циклом", "контекст выполнения", "передача метаданных", "все варианты"]', 3, 2, 'concurrency'),
('Можно ли изменить элемент массива в range?', '["нет, только копия", "да, через индекс", "только с указателем", "зависит от типа"]', 1, 2, 'arrays'),
('Что выведет: fmt.Println([]int{}[0])?', '["0", "nil", "panic", "ошибка компиляции"]', 2, 1, 'slices'),
('Какой размер int в Go?', '["зависит от архитектуры", "32 бита", "64 бита", "не определен"]', 0, 1, 'types'),
('Что такое variadic function?', '["функция с переменным числом аргументов", "анонимная функция", "closure", "метод"]', 0, 1, 'functions'),
('Можно ли создать константу типа slice?', '["нет", "да", "только для []byte", "через const()"]', 0, 2, 'constants'),
('Что выведет: fmt.Println(nil == nil)?', '["ошибка компиляции", "true", "false", "panic"]', 0, 3, 'interfaces'),
('Как остановить goroutine?', '["через канал done", "нет встроенного способа", "context.Cancel", "все варианты"]', 3, 2, 'concurrency'),
('Что такое rune в Go?', '["int32 для Unicode", "byte", "string", "char"]', 0, 1, 'types'),
('Можно ли переопределить оператор + для своего типа?', '["нет", "да", "только для чисел", "через interface"]', 0, 2, 'operators'),
('Что выведет: var x *int; fmt.Println(*x)?', '["0", "nil", "panic", "ошибка компиляции"]', 2, 2, 'pointers'),
('Какой zero value у func?', '["nil", "пустая функция", "null", "undefined"]', 0, 1, 'functions'),
('Что такое CGo?', '["интеграция с C", "компилятор Go", "сборщик мусора", "пакет Go"]', 0, 2, 'advanced'),
('Можно ли вернуть локальную переменную по указателю?', '["да, escape analysis", "нет, будет dangling pointer", "только через new", "только глобальные"]', 0, 3, 'memory'),
('Что выведет: fmt.Println(make([]int, 0, 5))?', '["[]", "[0 0 0 0 0]", "nil", "ошибка"]', 0, 2, 'slices'),
('Как создать write-only канал?', '["chan<- int", "<-chan int", "chan int", "writeonly chan int"]', 0, 2, 'channels'),
('Что такое type switch?', '["switch по типу interface", "switch по значению", "приведение типов", "проверка типа"]', 0, 2, 'interfaces'),
('Можно ли использовать break в select?', '["да", "нет", "только с label", "только в default"]', 0, 2, 'concurrency'),
('Что выведет: fmt.Println(append([]int{1}, []int{2,3}...))?', '["[1 2 3]", "[1 [2 3]]", "ошибка", "[1]"]', 0, 2, 'slices'),
('Какой zero value у struct?', '["все поля в zero values", "nil", "{}", "undefined"]', 0, 1, 'structs'),
('Что такое method set?', '["набор методов типа", "множество значений", "коллекция", "interface"]', 0, 3, 'methods'),
('Можно ли создать канал каналов?', '["да", "нет", "только buffered", "через interface"]', 0, 2, 'channels'),
('Что выведет: var i interface{} = 42; fmt.Println(i.(int))?', '["42", "ошибка", "panic если не int", "0"]', 0, 2, 'interfaces'),
('Как передать массив в функцию без копирования?', '["по указателю", "нельзя", "через slice", "оба: указатель и slice"]', 3, 2, 'arrays'),
('Что такое iota?', '["генератор констант", "цикл", "итератор", "функция"]', 0, 1, 'constants'),
('Можно ли сравнить два map?', '["нет, только через циклы или reflect", "да, через ==", "только пустые", "с помощью cmp"]', 0, 2, 'maps'),
('Что выведет: fmt.Println("Hello"[0])?', '["72", "H", "ошибка", "0"]', 0, 2, 'strings'),
('Какой zero value у channel?', '["nil", "закрытый канал", "пустой канал", "undefined"]', 0, 1, 'channels'),
('Что такое sync.WaitGroup?', '["ожидание завершения goroutines", "mutex", "канал", "семафор"]', 0, 2, 'concurrency'),
('Можно ли изменить map во время range?', '["да", "нет, panic", "только добавление", "только удаление"]', 0, 2, 'maps'),
('Что выведет: var s string; fmt.Println(len(s))?', '["0", "nil", "ошибка", "undefined"]', 0, 1, 'strings'),
('Как создать unbuffered канал?', '["make(chan int)", "make(chan int, 0)", "оба варианта", "chan int{}"]', 2, 1, 'channels'),
('Что такое named return values?', '["именованные возвращаемые значения", "переменные в return", "оба варианта", "тип функции"]', 2, 2, 'functions'),
('Можно ли использовать goto в Go?', '["да", "нет", "только в unsafe", "deprecated"]', 0, 2, 'basics'),
('Что выведет: fmt.Println([]int{1,2,3}[3])?', '["3", "0", "panic", "ошибка компиляции"]', 2, 1, 'slices'),
('Какой zero value у interface{}?', '["nil", "{}", "undefined", "null"]', 0, 1, 'interfaces'),
('Что такое sync.Mutex?', '["взаимное исключение", "канал", "goroutine", "wait group"]', 0, 1, 'concurrency'),
('Можно ли использовать defer в цикле?', '["да, но они выполнятся после выхода из функции", "нет", "только в for range", "только один defer"]', 0, 2, 'defer'),
('Что выведет: var x int; fmt.Println(&x == &x)?', '["true", "false", "ошибка", "зависит от компилятора"]', 0, 1, 'pointers'),
('Как создать slice из массива?', '["arr[:]", "slice(arr)", "arr.slice()", "make([]int, arr)"]', 0, 1, 'slices'),
('Что такое race condition?', '["одновременный доступ к данным", "deadlock", "memory leak", "panic"]', 0, 2, 'concurrency'),
('Можно ли создать указатель на константу?', '["нет", "да", "только на числа", "через unsafe"]', 0, 2, 'pointers'),
('Что выведет: fmt.Println(10 % 3)?', '["1", "0", "3", "3.33"]', 0, 1, 'operators'),
('Какой zero value у array?', '["все элементы в zero values", "nil", "[]", "undefined"]', 0, 1, 'arrays'),
('Что такое closure?', '["функция с доступом к внешним переменным", "анонимная функция", "метод", "goroutine"]', 0, 2, 'functions'),
('Можно ли создать канал nil?', '["да, var ch chan int", "нет", "только через make", "ошибка компиляции"]', 0, 2, 'channels'),
('Что выведет: var m map[int]int; m[1] = 1?', '["panic", "работает", "ошибка компиляции", "nil"]', 0, 2, 'maps'),
('Как проверить наличие ключа в map?', '["v, ok := m[key]", "m.Has(key)", "if m[key]", "m.Exists(key)"]', 0, 1, 'maps'),
('Что такое sync.RWMutex?', '["read-write mutex", "обычный mutex", "канал", "wait group"]', 0, 2, 'concurrency'),
('Можно ли изменить size массива после создания?', '["нет", "да", "только через append", "через copy"]', 0, 1, 'arrays'),
('Что выведет: fmt.Println(new(int))?', '["адрес", "0", "nil", "*int"]', 0, 2, 'pointers'),
('Какой zero value у error?', '["nil", "пустая строка", "{}", "undefined"]', 0, 1, 'errors'),
('Что такое type alias?', '["синоним типа", "новый тип", "приведение типов", "interface"]', 0, 2, 'types'),
('Можно ли читать из закрытого канала?', '["да, вернет zero value", "нет, panic", "зависит от буфера", "deadlock"]', 0, 2, 'channels'),
('Что выведет: var x interface{} = (*int)(nil); fmt.Println(x == nil)?', '["false", "true", "panic", "ошибка"]', 0, 3, 'interfaces'),
('Как создать goroutine?', '["go func()", "goroutine func()", "async func()", "new goroutine()"]', 0, 1, 'concurrency'),
('Что такое reflect?', '["рефлексия, анализ типов во время выполнения", "зеркало", "копирование", "интерфейс"]', 0, 3, 'advanced'),
('Можно ли использовать _ в названии переменной?', '["да", "нет, только blank identifier", "только в начале", "только в конце"]', 0, 1, 'basics'),
('Что выведет: fmt.Println([]int(nil) == nil)?', '["true", "false", "ошибка компиляции", "panic"]', 2, 3, 'slices'),
('Какой размер пустого struct{}?', '["0", "1", "зависит от архитектуры", "undefined"]', 0, 2, 'structs'),
('Что такое unsafe пакет?', '["небезопасные операции с памятью", "пакет для ошибок", "concurrency", "deprecated"]', 0, 3, 'advanced'),
('Можно ли создать циклическую зависимость между пакетами?', '["нет", "да", "только через interface", "через init"]', 0, 2, 'packages'),
('Что выведет: var b bool; fmt.Println(b)?', '["false", "true", "0", "nil"]', 0, 1, 'types'),
('Как остановить программу?', '["os.Exit()", "return", "panic", "все варианты"]', 3, 1, 'basics'),
('Что такое init функция?', '["инициализация пакета", "конструктор", "деструктор", "main функция"]', 0, 2, 'packages'),
('Можно ли переопределить встроенные функции?', '["нет", "да", "только len/cap", "через unsafe"]', 0, 2, 'basics'),
('Что выведет: fmt.Println(0.1 + 0.2 == 0.3)?', '["false из-за float", "true", "ошибка", "зависит от компилятора"]', 0, 2, 'floats'),
('Какой максимальный размер slice?', '["зависит от памяти", "2^32", "2^64", "нет ограничений"]', 0, 2, 'slices'),
('Что такое go:generate?', '["директива для кодогенерации", "запуск goroutine", "компиляция", "тест"]', 0, 3, 'advanced'),
('Можно ли создать slice nil?', '["да, var s []int", "нет", "только через make", "ошибка"]', 0, 1, 'slices');
